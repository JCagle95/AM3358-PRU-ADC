.origin 0
.entrypoint START

.struct DataStorage
	.u32	RunFlag
	.u32	DataReady
	.u32	DataSize
.ends

#define PRU_DATA0_BASE		0x00000000
#define PRU0_ARM_INTERRUPT	0x13

#define PRU_RAM_ADDRESS		R16
#define MAX_SIZE			R17
#define DATA				R18
#define DATA_ADDRESS		R19
#define SECTOR_ONE_ADDRESS	R20
#define SECTOR_TWO_ADDRESS	R21
#define SECTOR_COUNT		R22

START:
	// Load the PRU0 address
	MOV		PRU_RAM_ADDRESS, PRU_DATA0_BASE
	
	// Load Array Size
	LBBO 	MAX_SIZE, PRU_RAM_ADDRESS, OFFSET(DataStorage.DataSize), 4
	
	// Initialize DATA_ADDRESS for two sectors
	ADD 	SECTOR_ONE_ADDRESS, PRU_RAM_ADDRESS, OFFSET(DataStorage.DataSize) + 4
	ADD 	SECTOR_TWO_ADDRESS, SECTOR_ONE_ADDRESS, MAX_SIZE
	LDI		DATA, 0
	LDI		SECTOR_COUNT, 0
	
MAIN:
	// Point the data address to beginning of first sector
	MOV		DATA_ADDRESS, SECTOR_ONE_ADDRESS
	
DATA_STORE:
	ADD		DATA, DATA, 4
	SBBO	DATA, DATA_ADDRESS, 0, 4
	ADD		DATA_ADDRESS, DATA_ADDRESS, 4
	LDI		r0, 2000

DELAY_RATE:
	SUB		r0, r0, 1
	QBLT	DELAY_RATE, r0, 0
	
	// Go to Trigger One if Sector 1 is filled up
	QBEQ	TRIGGER, DATA_ADDRESS, SECTOR_TWO_ADDRESS
	ADD		r0, SECTOR_TWO_ADDRESS, MAX_SIZE
	QBEQ	TRIGGER, DATA_ADDRESS, r0
	JMP		CHECK

TRIGGER:
	ADD 	SECTOR_COUNT, SECTOR_COUNT, 1
	SBBO	SECTOR_COUNT, PRU_RAM_ADDRESS, OFFSET(DataStorage.DataReady), 4
	QBBC	MAIN, SECTOR_COUNT, 0

CHECK:
	// Check Run flag
	LBBO 	r0, PRU_RAM_ADDRESS, OFFSET(DataStorage.RunFlag), 4
	QBEQ 	EXIT, r0, 0
	JMP		DATA_STORE
	
EXIT:
	MOV R31.b0, PRU0_ARM_INTERRUPT + 16

HALT